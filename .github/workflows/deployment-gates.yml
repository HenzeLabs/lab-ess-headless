name: Deployment Gates

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  # Gate 1: Code Quality
  code-quality:
    name: Code Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run typecheck

      - name: ESLint check
        run: npm run lint

      - name: Brand tokens validation
        run: npm run validate:brand

  # Gate 2: Security
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for secret scanning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run audit:security

      - name: NPM audit
        run: npm audit --audit-level=high
        continue-on-error: false

  # Gate 3: Build & Bundle
  build:
    name: Production Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build
        env:
          SHOPIFY_STORE_DOMAIN: ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN: ${{ secrets.NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN }}

      - name: Check bundle size
        run: npm run audit:bundle

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next
          retention-days: 7

  # Gate 4: Tests - Core Functionality
  test-core:
    name: Core Functional Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next

      - name: Run core tests
        run: npm run test:core
        env:
          SHOPIFY_STORE_DOMAIN: ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN: ${{ secrets.NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-core
          path: test-results/
          retention-days: 7

  # Gate 5: Accessibility Tests
  test-accessibility:
    name: Accessibility (WCAG 2.1 AA)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next

      - name: Run accessibility tests
        run: npm run test:a11y
        env:
          SHOPIFY_STORE_DOMAIN: ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN: ${{ secrets.NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-a11y
          path: test-results/
          retention-days: 7

  # Gate 6: Lighthouse Performance
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next

      - name: Run Lighthouse CI
        run: npm run lh
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  # Gate 7: SEO Validation
  seo:
    name: SEO & Meta Tags Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next

      - name: Run SEO validation
        run: npm run audit:seo

      - name: Run SEO tests
        run: npm run test:seo
        env:
          SHOPIFY_STORE_DOMAIN: ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN: ${{ secrets.NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN }}

  # Gate 8: Final Deployment Check
  deployment-ready:
    name: Final Deployment Check
    runs-on: ubuntu-latest
    needs:
      [code-quality, security, build, test-core, test-accessibility, lighthouse, seo]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next

      - name: Run deployment audit
        run: npm run audit:deployment -- --skip-tests --skip-lighthouse

      - name: Generate deployment report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-audit-results
          path: deployment-audit-results.json
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('deployment-audit-results.json', 'utf8'));

            const comment = `## üöÄ Deployment Readiness Report

            **Status:** ${results.passed ? '‚úÖ Ready for deployment' : '‚ùå Blocked'}

            **Gates Summary:**
            - Tests: ${results.gates.tests?.passRate || 'N/A'}% pass rate
            - Security: ${results.gates.security?.critical || 0} critical vulnerabilities
            - Accessibility: ${results.gates.accessibility?.critical || 0} critical issues

            **Failures:** ${results.failures.length}
            **Warnings:** ${results.warnings.length}

            ${results.failures.length > 0 ? '### ‚ùå Failures\n' + results.failures.map(f => `- **${f.gate}**: ${f.message}`).join('\n') : ''}

            [View detailed results in artifacts](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Deployment approved
        if: success()
        run: |
          echo "‚úÖ All deployment gates passed!"
          echo "Ready for production deployment."

      - name: Deployment blocked
        if: failure()
        run: |
          echo "‚ùå Deployment gates failed!"
          echo "Review the failures and fix before deploying."
          exit 1
